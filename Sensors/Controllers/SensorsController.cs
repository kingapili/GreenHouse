using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using MassTransit;
using Microsoft.AspNetCore.Mvc;
using Model;
using Sensors.Services;
using Sensors.Utils;

namespace Sensors.Controllers
{
    [Route("[controller]")]
    public class SensorsController : Controller
    {
        private readonly IPublishEndpoint _publishEndpoint;
        private readonly ISensorService _sensorService;

        public SensorsController(IPublishEndpoint publishEndpoint, ISensorService sensorService
        )
        {
            _publishEndpoint = publishEndpoint;
            _sensorService = sensorService;
        }

        /// <summary>
        /// Get a List of all available sensors.
        /// </summary>
        /// <returns>List of sensors</returns>
        [HttpGet("")]
        public IEnumerable<ISensor> GetSensors()
        {
            foreach (var sensor in _sensorService.GetSensors())
            {
                Console.WriteLine(sensor);
            }

            return _sensorService.GetSensors();
        }

        /// <summary>
        /// Get a sensor with given id.
        /// </summary>
        /// <returns>Sensor with a given id</returns>
        [HttpGet("{id:int}")]
        public ISensor GetSensor(int id)
        {
            return _sensorService.GetSensor(id);
        }

        /// <summary>
        /// Generate one SensorData object from a sensor with a given id
        /// </summary>
        /// <param name="id">Given sensor id</param>
        /// <returns>Http status code indicating if single SensorData object was successfully generated</returns>
        [HttpGet("{id:int}/generate-single")]
        public async Task<IActionResult> GenerateSingleDataFromSensor(int id)
        {
            var sensorData = _sensorService.GetSensor(id).GenerateSingleValue();

            try
            {
                await _publishEndpoint.Publish(sensorData);
                await Console.Out.WriteLineAsync(SensorUtils.SensorDataToJson(sensorData));
            }
            catch (Exception ex)
            {
                await Console.Out.WriteLineAsync(ex.StackTrace);
                return BadRequest();
            }

            return Ok();
        }

        /// <summary>
        /// Generate one SensorData object with user-defined value from a sensor with a given id
        /// </summary>
        /// <param name="id">Given sensor id</param>
        /// <param name="value">Value to be generated by the sensor defined by the user</param>
        /// <returns>Http status code indicating if single SensorData object was successfully generated</returns>
        [HttpGet("{id:int}/generate-single/{data-value}")]
        public async Task<IActionResult> GenerateGivenValueFromSensor(int id, double value)
        {
            var sensorData = _sensorService.GetSensor(id).GenerateSingleValue(value);

            try
            {
                await _publishEndpoint.Publish(sensorData);
                await Console.Out.WriteLineAsync(SensorUtils.SensorDataToJson(sensorData));
            }
            catch (Exception ex)
            {
                await Console.Out.WriteLineAsync(ex.StackTrace);
                return BadRequest();
            }

            return Ok();
        }

        /// <summary>
        /// Generate one SensorData object for every existing sensor
        /// </summary>
        /// <returns>Http status code indicating if all SensorData objects were successfully generated</returns>
        [HttpGet("generate-single")]
        public async Task<IActionResult> GenerateSingleDataFromAllSensors()
        {
            var sensors = _sensorService.GetSensors();
            foreach (var sensor in sensors)
            {
                try
                {
                    var sensorData = sensor.GenerateSingleValue();
                    await _publishEndpoint.Publish(sensorData);
                    await Console.Out.WriteLineAsync(SensorUtils.SensorDataToJson(sensorData));
                }
                catch (Exception ex)
                {
                    await Console.Out.WriteLineAsync(ex.StackTrace);
                    return BadRequest();
                }
            }

            return Ok();
        }

        /// <summary>
        /// Start generating data from all existing sensors.
        /// </summary>
        [HttpGet("runall")]
        public async Task RunAll()
        {
            var token = _sensorService.GetNewTokenSource().Token;

            var tasks = new ConcurrentBag<Task>();
            Task t;

            foreach (var sensor in _sensorService.GetSensors())
            {
                sensor.IsRunning = true;
                t = Task.Run(() => DoSensorWork(sensor), token);
                tasks.Add(t);
            }

            try
            {
                await Task.WhenAll(tasks.ToArray());
            }
            catch (OperationCanceledException e)
            {
                Console.WriteLine(e);
            }
        }

        /// <summary>
        /// Function for data generating from a single sensor.
        /// </summary>
        /// <param name="sensor">Sensor generating the data.</param>
        private async void DoSensorWork(ISensor sensor)
        {
            while (true)
            {
                var token = _sensorService.GetTokenSource().Token;
                try
                {
                    await GenerateSingleDataFromSensor(sensor.Id);
                    Thread.Sleep(sensor.Interval);
                }
                catch (OperationCanceledException e)
                {
                    await Console.Out.WriteLineAsync(e.StackTrace);
                    return;
                }
                if (token.IsCancellationRequested)
                {
                    return;
                }
            }
        }
        
        /// <summary>
        /// Stop generating data from all existing sensors.
        /// </summary>
        [HttpGet("stopall")]
        public void StopAll()
        {
            _sensorService.GetTokenSource().Cancel();
            Console.WriteLine("\nTask cancellation requested.");
            _sensorService.GetTokenSource().Dispose();
            foreach (var sensor in _sensorService.GetSensors())
            {
                sensor.IsRunning = false;
            }
        }
    }
}